generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  username        String
  email           String    @unique
  password        String
  refresh_token   String?
  avatar          String    @default("https://res.cloudinary.com/dr98sm712/image/upload/v1712373133/guest-user_it2nym.png")
  role            Role      @default(USER)
  active          Boolean   @default(false)
  created_at      DateTime  @default(now())
  update_at       DateTime? @updatedAt
  address         String?
  phone_number    String?
  is_social_login Boolean   @default(false)
  bills           Bill[]
  reviews         Review[]
}

model Product {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  description String
  old_price   Int
  new_price   Int
  image       String
  available   Int                    @default(0)
  created_at  DateTime               @default(now())
  update_at   DateTime?              @updatedAt
  brand       String
  categories  CategoriesOnProducts[]
  items       Item[]
  reviews     Review[]
}

model Category {
  id         Int                    @id @default(autoincrement())
  name       String                 @unique
  created_at DateTime               @default(now())
  update_at  DateTime?              @updatedAt
  path       String                 @unique
  products   CategoriesOnProducts[]
}

model CategoriesOnProducts {
  product_id  Int
  category_id Int
  created_at  DateTime  @default(now())
  update_at   DateTime? @updatedAt
  category    Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([product_id, category_id])
}

model Review {
  id          Int       @id @default(autoincrement())
  description String
  star        Int       @default(3)
  user_id     Int
  product_id  Int
  created_at  DateTime  @default(now())
  images      String[]
  update_at   DateTime? @updatedAt
  active      Boolean   @default(false)
  product     Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
}

model Bill {
  id                  Int                  @id @default(autoincrement())
  customer_name       String
  address             String
  phone_number        String
  email               String?
  note                String?
  user_id             Int?
  order_status        OrderStatus          @default(PROCESSING)
  payment_status      Boolean              @default(false)
  payment_method      PaymentMethod
  total_amount        Int?
  created_at          DateTime             @default(now())
  update_at           DateTime?            @updatedAt
  user                User?                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items               Item[]
  NotifiBill          NotifiBill?
  ReasonCancelledBill ReasonCancelledBill?
  ShippingBilll       ShippingBilll?
}

model NotifiBill {
  bill_id    Int       @unique
  is_read    Boolean   @default(false)
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
  bill       Bill      @relation(fields: [bill_id], references: [id], onDelete: Cascade)
}

model ReasonCancelledBill {
  bill_id          Int       @unique
  reason_cancelled String?
  created_at       DateTime  @default(now())
  update_at        DateTime? @updatedAt
  bill             Bill      @relation(fields: [bill_id], references: [id], onDelete: Cascade)
}

model ShippingBilll {
  bill_id         Int            @unique
  ghn_order_code  Int            @unique
  shipping_status ShippingStatus @default(READY_TO_PICK)
  created_at      DateTime       @default(now())
  update_at       DateTime?      @updatedAt
  bill            Bill           @relation(fields: [bill_id], references: [id], onDelete: Cascade)
}

model Item {
  bill_id     Int
  product_id  Int
  quantity    Int
  created_at  DateTime  @default(now())
  update_at   DateTime? @updatedAt
  total_price Int?
  price       Int
  bill        Bill      @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([bill_id, product_id])
}

model SaleCampaign {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  from_date  String
  to_date    String
  active     Boolean
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
}

enum Role {
  USER
  ADMIN
  SELLER
}

enum OrderStatus {
  PROCESSING
  SUCCESS
  CANCELLED
}

enum PaymentMethod {
  SHIPCOD
  BANK_TRANSFER
  VNPAY
}

enum ShippingStatus {
  READY_TO_PICK
  DELIVERED
  CANCEL
}
