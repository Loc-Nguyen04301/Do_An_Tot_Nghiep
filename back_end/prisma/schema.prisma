generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String
  email         String    @unique
  password      String
  refresh_token String?
  avatar        String    @default("https://res.cloudinary.com/dr98sm712/image/upload/v1712373133/guest-user_it2nym.png")
  role          Role      @default(USER)
  active        Boolean   @default(false)
  created_at    DateTime  @default(now())
  update_at     DateTime? @updatedAt
  bills         Bill[]
  reviews       Review[]
}

model Product {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  brand       String
  description String
  old_price   Int
  new_price   Int
  image       String
  available   Int                    @default(0)
  created_at  DateTime               @default(now())
  update_at   DateTime?              @updatedAt
  categories  CategoriesOnProducts[]
  items       Item[]
  reviews     Review[]
}

model Category {
  id         Int                    @id @default(autoincrement())
  name       String                 @unique
  created_at DateTime               @default(now())
  update_at  DateTime?              @updatedAt
  products   CategoriesOnProducts[]
}

model CategoriesOnProducts {
  product_id  Int
  category_id Int
  created_at  DateTime @default(now())
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([product_id, category_id])
}

model Review {
  id          Int       @id @default(autoincrement())
  description String
  star        Int       @default(3)
  user_id     Int
  product_id  Int
  images      String[]
  created_at  DateTime  @default(now())
  update_at   DateTime? @updatedAt
  product     Product   @relation(fields: [product_id], references: [id])
  user        User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, product_id])
}

model Bill {
  id             Int           @id @default(autoincrement())
  customer_name  String
  address        String
  phone_number   String
  email          String
  note           String?
  user_id        Int?
  order_status   OrderStatus   @default(PROCESSING)
  payment_status Boolean       @default(false)
  return_status  ReturnStatus  @default(NONE)
  payment_method PaymentMethod
  created_at     DateTime      @default(now())
  update_at      DateTime?     @updatedAt
  user           User?         @relation(fields: [user_id], references: [id])
  items          Item[]
}

model Item {
  bill_id    Int
  product_id Int
  quantity   Int
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
  bill       Bill      @relation(fields: [bill_id], references: [id])
  product    Product   @relation(fields: [product_id], references: [id])

  @@unique([bill_id, product_id])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  SUCCESS
  CANCELLED
}

enum ReturnStatus {
  NONE
  REQUESTED
  PROCESSING
  RETURNED
}

enum PaymentMethod {
  SHIPCOD
  BANK_TRANSFER
  VNPAY
}
